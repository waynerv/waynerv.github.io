<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Shall We Code?</title><link>https://waynerv.github.io/</link><description>谈谈天，写写码</description><generator>Hugo 0.79.1 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>ampedee@gmail.com (Waynerv)</managingEditor><webMaster>ampedee@gmail.com (Waynerv)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Tue, 29 Dec 2020 15:17:37 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://waynerv.github.io/rss.xml"/><item><title>Git 合并浅析</title><link>https://waynerv.github.io/posts/git%E5%90%88%E5%B9%B6%E6%B5%85%E6%9E%90/</link><guid isPermaLink="true">https://waynerv.github.io/posts/git%E5%90%88%E5%B9%B6%E6%B5%85%E6%9E%90/</guid><pubDate>Tue, 29 Dec 2020 07:17:23 +0800</pubDate><author>ampedee@gmail.com (Waynerv)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>合并在 Git 中是一个十分常见的操作：整合不同分支之间的更改，或者对远程分支执行 &lt;code>pull&lt;/code> 及 &lt;code>push&lt;/code> 操作，都需要进行合并。&lt;/p>
&lt;p>但对新手来说， &lt;code>git merge&lt;/code> 这一命令有些令人生畏，因为在不同情况下，执行 &lt;code>merge&lt;/code> 可能会得到不同的结果。这种对于结果的不确定性，使我很长一段时间都不敢主动去使用它，而是依赖 GitHub 的 &lt;code>Pull Request&lt;/code> 或者 GitLab 的 &lt;code>Merge Request&lt;/code> 等可视化界面手动合并。&lt;/p>
&lt;p>为了今后可以放心大胆的 &lt;code>merge&lt;/code>，今天我们就来对 &lt;code>merge&lt;/code> 一探究竟。&lt;/p>
&lt;h2 id="认识合并">认识合并&lt;/h2>
&lt;p>在版本控制系统中，合并是将一组文件中所发生的不同更改进行整合的基础操作。通常来说，我们在使用 Git 时会建立不同的分支，由不同的人对同一组文件执行新增、编辑等操作，最终我们需要合并这些协作的分支，整合所有的更改形成一份文件版本。&lt;/p>
&lt;p>合并一般由 Git 自动执行，但如果发生了冲突，比如对同一文件的同一处内容执行了不同的更改，则需要我们手动合并。&lt;/p>
&lt;h3 id="递归三路合并算法">递归三路合并算法&lt;/h3>
&lt;p>Git 在自动合并时会使用「&lt;a href="https://en.wikipedia.org/wiki/Merge_(version_control)#Recursive_three-way_merge">递归三路合并&lt;/a>」算法对不同文件进行差异分析，接下来我们简单了解一下该算法。&lt;/p>
&lt;p>首先从「三路合并」算法开始，假设我们有以下提交历史：&lt;/p>
&lt;p>&lt;img src="https://waynerv.github.io/images/Dec-29-2020-merge.gif" alt="Dec-29-2020 22-40-46">&lt;/p>
&lt;p>上图中我们在 &lt;code>master&lt;/code> 合并了 &lt;code>feature&lt;/code> 分支，现在我们回溯一下合并的过程：&lt;/p>
&lt;p>此时 &lt;code>master&lt;/code> 正指向提交 C，Git 首先找到两个分支最近的唯一共同祖先提交 A，然后分别对 A、C、F 提交的文件快照进行对比，我们下文称呼它们为 A、C、F 文件。接下来 Git 将逐「行」对三个文件的内容进行比较，如果三个文件中有两个文件该行的内容一致，则丢弃 A 文件中该行的内容，保留与 A 文件中不同的内容放到结果文件中。&lt;/p>
&lt;p>具体来说，假如 A、C 内容一致，说明这是在 F 中更改的内容，需要保留该更改；A、F 内容一致同理；假如 C、F 内容一致，说明 C 和 F 都相对于 A 做了同样的更改，同样需要保留。除此之外的内容差异仅剩两种情况：如果 A、C、F 的内容都一致，说明什么都没有发生；如果该行在 A、C、F 的内容都不一致，说明发生了冲突，需要我们手动合并选择需要保留的内容。&lt;/p>
&lt;p>结束对比后 Git 会以最终的结果文件快照创建一个新的 Merge 提交并指向它。&lt;/p>
&lt;p>三路合并算法的基础是找到被合并文件的共同祖先，在一些简单的场景中这还能行的通，但在遇到&lt;a href="https://zh.wikipedia.org/wiki/%E5%90%88%E5%B9%B6_(%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)#cite_note-2">十字交叉合并（criss-cross merge）&lt;/a>时，不存在唯一的最近共同祖先，如下图：&lt;/p>
&lt;p>&lt;img src="https://waynerv.github.io/images/20201229152228-criss-cross-merge.png" alt="20201229152228-criss-cross-merge">&lt;/p>
&lt;p>现在我们需要从 &lt;code>main&lt;/code> 分支合并 &lt;code>feature&lt;/code> 分支，即把 C7 合并到 C8，会发现 C8 和 C7 有两个共同祖先，这下怎么办呢？Git 采取的是递归三路合并（Recursive three-way merge），会先合并 C3 和 C5 这两个共同祖先创建一个虚拟的唯一最近祖先（假设为 C9），接着在 C9、C7、C8 之间执行三路合并，如果在合并 C3 和 C5 的过程中又发生没有唯一共同祖先的情况，则递归执行上述过程。&lt;/p>
&lt;p>关于递归三路合并算法我们就了解到这里。&lt;/p>
&lt;h3 id="合并冲突">合并冲突&lt;/h3>
&lt;p>如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就无法自动地合并它们，而是会暂停合并过程，等待你去手动解决冲突。&lt;/p>
&lt;p>首先我们需要找到这些需要解决冲突的文件，使用 &lt;code>git status&lt;/code> 可以查看这些因包含合并冲突而处于未合并状态的文件：&lt;/p>
&lt;pre>&lt;code>$ git status
On branch master
You have unmerged paths.
(fix conflicts and run &amp;quot;git commit&amp;quot;)
Unmerged paths:
(use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to mark resolution)
both modified: main.py
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>手动解决冲突类似于二选一的过程，Git 会在有冲突的文件中加入特殊的标记，看起来像下面这样：&lt;/p>
&lt;pre>&lt;code>&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD:main.py
print(&amp;quot;Hello World&amp;quot;)
=======
print(&amp;quot;World Hello&amp;quot;)
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; feature:main.py
&lt;/code>&lt;/pre>&lt;p>通过 &lt;code>=======&lt;/code> 进行分割，以 &lt;code>&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD:main.py&lt;/code> 标记为上界的上半部分是当前分支 &lt;code>master&lt;/code> 所做的更改，以 &lt;code>&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; feature:main.py&lt;/code> 标记为下界的下半部分是要合并的 &lt;code>feature&lt;/code> 对同一内容所做的不同更改，我们需要删除这些标记，仅保留我们需要的内容：&lt;/p>
&lt;pre>&lt;code>print(&amp;quot;Hello World&amp;quot;)
&lt;/code>&lt;/pre>&lt;p>当然也可以不从中选择，而是用一段全新的内容去替换它。&lt;/p>
&lt;p>在解决了所有文件里的冲突之后，需要使用 &lt;code>git add&lt;/code> 暂存这些文件来将其标记为冲突已解决。然后再执行 &lt;code>git commit&lt;/code> 来完成合并提交。 Git 会将解决的这些冲突，加入到上文提到的新增的 Merge 提交里。&lt;/p>
&lt;h3 id="快进合并">快进合并&lt;/h3>
&lt;p>也有些时候，我们在执行了合并操作后，会发现并没有增加一个新的 Merge 提交。这种情况我们称之为快进（fast-forward）合并。&lt;/p>
&lt;p>假设我们基于 &lt;code>master&lt;/code> 创建了 &lt;code>feature&lt;/code> 分支，并新增了一些提交。现在我们将 &lt;code>feature&lt;/code> 的更改合入 &lt;code>master&lt;/code> 分支：&lt;/p>
&lt;pre>&lt;code>$ git checkout master
$ git merge feature
Updating f42c576..3a0874c
Fast-forward
main.py | 2 ++
task.py | 3 ++
worker.py | 1 ++
3 file changed, 6 insertions(+)
&lt;/code>&lt;/pre>&lt;p>过程示意如下：&lt;/p>
&lt;p>&lt;img src="https://waynerv.github.io/images/Dec-29-2020-fast-forward.gif" alt="Dec-29-2020 22-50-28">&lt;/p>
&lt;p>由于我们想要合并的分支 &lt;code>feature&lt;/code> 所指向的提交 D 是 &lt;code>master&lt;/code> 的直接后继， 因此 Git 会直接将 &lt;code>HEAD&lt;/code> 指针向前移动。换句话说，如果顺着一个分支走下去一定能够到达另一个分支，那么 Git 在合并两者时只会简单的将指针向前推进（右移），因为这种情况下的合并操作没有需要解决的分歧——这就叫做快进（fast-forward）。&lt;/p>
&lt;h2 id="git-的不同合并策略">Git 的不同合并策略&lt;/h2>
&lt;p>我们在使用 Git 时，通常会基于主分支拉出若干条功能分支进行开发，开发完毕后再将功能分支合入主分支。有以下不同的分支合并策略：&lt;/p>
&lt;ul>
&lt;li>通过 &lt;code>merge&lt;/code> 显式合并&lt;/li>
&lt;li>通过 &lt;code>rebase&lt;/code> 或 &lt;code>fast-forward&lt;/code> 隐式合并&lt;/li>
&lt;li>&lt;code>squash&lt;/code> 后隐式合并&lt;/li>
&lt;/ul>
&lt;h3 id="通过-merge-显式合并">通过 &lt;code>merge&lt;/code> 显式合并&lt;/h3>
&lt;p>这是最常见和最直接的合并方式，也是 GitHub 和 GitLab 等代码托管平台的默认实现方式。&lt;/p>
&lt;p>&lt;img src="https://waynerv.github.io/images/Dec-29-2020-merge.gif" alt="Dec-29-2020 22-40-46">&lt;/p>
&lt;p>当我们将功能分支合入主分支时，Git 会对两个分支进行递归三路合并，并以合并结果创建一个新的 Merge 提交。这个 Merge 提交和普通的提交本质上是一样的，但是它有两个父提交：&lt;/p>
&lt;pre>&lt;code>$ git cat-file -p 44ba027
tree 5a1692ba62ef346b59e65e4aa441c731bebc51ff
parent 75bf5c59c2e7e493c98e026a415f16b8f0445e4a
parent bbbe6a4c02aa709299ac891779448daf8203df53
author xx &amp;lt;xx@xx.com&amp;gt; 1609141855 +0800
committer xx &amp;lt;xx@xx.com&amp;gt; 1609141855 +0800
Merge branch 'feature' into 'master'
&lt;/code>&lt;/pre>&lt;p>我们能在提交历史中，很明了地根据 Merge 提交查看发生的合并事件。但另一方面，大量的 Merge 提交会使你的提交历史有很多分叉，甚至十分凌乱，有些开发者或者团队可能会想要一个看上去更加整洁的线性提交历史。&lt;/p>
&lt;p>需要注意的是，默认情况下 Git 不会在快进合并的情况下创建单独的 Merge 提交。假如我们想在所有情况下都创建一个 Merge 提交，需要在执行 &lt;code>git merge&lt;/code> 命令时添加 &lt;code>--no-ff&lt;/code> 选项。&lt;/p>
&lt;h3 id="通过-rebase-或-fast-forward-隐式合并">通过 &lt;code>rebase&lt;/code> 或 &lt;code>fast-forward&lt;/code> 隐式合并&lt;/h3>
&lt;p>我们可以用 &lt;code>rebase&lt;/code> 替换 &lt;code>merge&lt;/code> 进行合并，我在之前的一篇文章&lt;a href="https://waynerv.github.io/posts/git-rebase-intro/">git-rebase 浅析&lt;/a>中详细介绍过 &lt;code>rebase&lt;/code> 的原理和用法，简单来说 &lt;code>rebase&lt;/code> 操作会找到两个分支的最近的祖先提交，并基于目标分支按顺序重新应用当前分支在祖先提交之后的更改。假设我们有如下图的 &lt;code>master&lt;/code> 和 &lt;code>feature&lt;/code> 两个分支，执行下列操作：&lt;/p>
&lt;pre>&lt;code>$ git checkout feature
$ git rebase master
$ git checkout master
$ git merge feature
&lt;/code>&lt;/pre>&lt;p>过程如下图所示：&lt;/p>
&lt;p>&lt;img src="https://waynerv.github.io/images/Dec-29-2020-rebase.gif" alt="Dec-29-2020 19-03-49">&lt;/p>
&lt;p>我们首先用 &lt;code>rebase&lt;/code> 将 &lt;code>master&lt;/code> 合并到了 &lt;code>feature&lt;/code>，即使两个分支都有不同的提交，也得到了一条完全线性的 &lt;code>feature&lt;/code> 分支，而且没有额外的 Merge 提交。&lt;/p>
&lt;p>接着又切换到 &lt;code>master&lt;/code> 分支合并了 &lt;code>feature&lt;/code>。&lt;code>rebase&lt;/code> 之后的 &lt;code>feature&lt;/code> 分支上，所有提交都是 &lt;code>master&lt;/code> 的后继提交，因此我们将直接执行快进合并。快进合并只有在 &lt;code>master&lt;/code> 分支中没有比 &lt;code>feature&lt;/code> 更新的提交时才会发生（使用 &lt;code>rebase&lt;/code> 能够确保该结果），在这种情况下，&lt;code>master&lt;/code> 的 &lt;code>HEAD&lt;/code> 可以直接右移到 &lt;code>feature&lt;/code> 分支的最新提交。这样合并也不会生成单独的 Merge 提交，它只是将分支标签快速指向了新的提交。&lt;/p>
&lt;p>通过 &lt;code>rebase&lt;/code> 或 &lt;code>fast-forward&lt;/code> 隐式的合并，我们能够得到一条整洁线性的提交历史，但同时也会丢失这些提交曾经的上下文信息。&lt;/p>
&lt;h3 id="squash-后隐式合并">&lt;code>squash&lt;/code> 后隐式合并&lt;/h3>
&lt;p>还有一种合并变更的策略是，在执行快进合并或 &lt;code>rebase&lt;/code> 之前，将所有功能分支的提交通过 &lt;code>rebase&lt;/code> 交互模式的 &lt;code>squash&lt;/code> 命令压缩成一个提交。这样可以进一步保持主分支提交历史的线性和整洁。它将一个完整的功能单独保存在一次提交中，但也失去了对整个功能分支开发过程的记录和细节。具体的操作方法可参考&lt;a href="https://waynerv.github.io/posts/git-rebase-intro/#%E9%87%8D%E5%86%99%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">重写提交历史&lt;/a>。&lt;/p>
&lt;p>这三种策略都有明显的优缺点，我们可以根据具体的场景以及自己的需求进行选择。&lt;/p>
&lt;h2 id="参考链接">参考链接&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Merge_(version_control)">Merge (version control)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://git-scm.com/docs/git-merge">git-merge - Join two or more development histories together&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.developer.atlassian.com/pull-request-merge-strategies-the-great-debate/#:~:text=And%20the%20merge%20can%20complete,of%20an%20earlier%20feature%20branch">Pull Request Merge Strategies: The Great Debate&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6">Git 分支 - 分支的新建与合并&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000021712743">git merge的原理（递归三路合并算法）&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description><category domain="https://waynerv.github.io/categories/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://waynerv.github.io/tags/git/">Git</category></item><item><title>使用 Hugo 和 GitHub Pages 部署个人博客</title><link>https://waynerv.github.io/posts/setup-blog-with-hugo-and-github-pages/</link><guid isPermaLink="true">https://waynerv.github.io/posts/setup-blog-with-hugo-and-github-pages/</guid><pubDate>Thu, 24 Dec 2020 21:47:50 +0800</pubDate><author>ampedee@gmail.com (Waynerv)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>作为一个已经入行了一年多的（老）技术人，维护一个看得过去的个人博客是很有必要的。&lt;/p>
&lt;p>刚学编程的时候，我还开源过一个基于 Flask 和 MongoDB 的&lt;a href="https://github.com/waynerv/originblog">博客项目&lt;/a>，但后面就没怎么使用和维护了，除开主观上的懒，还因为：&lt;/p>
&lt;ul>
&lt;li>自建博客绕不开主机和域名，这是一笔持续的经济成本。国内的主机往往是第一年割肉第二年宰猪，国外的主机访问延迟很高。&lt;/li>
&lt;li>国内主机更麻烦的是还需要定期备案，第一个博客就是因为备案到期中断了。&lt;/li>
&lt;li>博客功能的实现技术难度不大，开始还有一些新鲜感，有了工作经验后就很难有兴趣继续维护了。&lt;/li>
&lt;/ul>
&lt;p>刚好最近有写一些文章的打算，决定找个简单、省事（最后发现并没有）且不花钱的路子把博客再搞起来，经过一番研究，选择了生成静态站点发布到 GitHub Pages 的方案。&lt;/p>
&lt;h2 id="工作流">工作流&lt;/h2>
&lt;p>整个方案的流程大致如下：&lt;/p>
&lt;ol>
&lt;li>用 Markdown 格式写作文章。&lt;/li>
&lt;li>使用生成器将 markdown 文件转换成静态站点。&lt;/li>
&lt;li>将生成的站点内容推送到 GitHub 并发布。&lt;/li>
&lt;/ol>
&lt;p>写 markdown 没啥好说的，什么编辑器都可以，我一直用的是 Typora。&lt;/p>
&lt;p>静态站点生成器我选择了 Hugo，原因是最近刚好在学 Go，此外还有 Gatsby、Jekyll、Hexo等很多选项。&lt;/p>
&lt;p>接下来要做的工作是生成静态站点并通过 GitHub Pages 发布。&lt;/p>
&lt;h2 id="生成静态站点">生成静态站点&lt;/h2>
&lt;p>使用 Hugo 生成静态博客站点非常简单，具体的步骤和用法可以参考官方文档的 &lt;a href="https://gohugo.io/getting-started/quick-start/">Quick Start&lt;/a>。下面简单介绍下整个过程：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>安装 Hugo。&lt;code>macOS&lt;/code> 下可以直接使用 &lt;code>homebrew&lt;/code>安装：&lt;code>brew install hugo&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>创建一个新的站点。这会生成一个特定结构的项目文件夹，用来维护所有的站点内容。假设我们想把它命名为 &lt;code>hugo-blog&lt;/code>，则使用以下命令创建并切换到该目录，后续的操作和命令都会在这个根目录下执行：&lt;/p>
&lt;pre>&lt;code>hugo new site hugo-blog
cd hugo-blog
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>安装一个主题。这一步是必需的，否则会因为缺少基础模板无法生成站点。安装主题有 3 种方式，以 &lt;code>eureka&lt;/code> 主题为例：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>直接下载主题的压缩文件，将解压得到的文件夹重命名为主题名称 &lt;code>eureka&lt;/code> 放到 &lt;code>themes/&lt;/code>目录下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过 &lt;code>git submodule&lt;/code> 安装：&lt;/p>
&lt;pre>&lt;code>git init
git submodule add https://github.com/wangchucheng/hugo-eureka.git themes/eureka
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>通过 &lt;code>Hugo Modules&lt;/code> 安装（这种方式要求本机安装有 &lt;a href="https://golang.org/dl/">Go 1.12&lt;/a> 及以上版本，且只有部分主题支持）：&lt;/p>
&lt;pre>&lt;code>hugo mod init &amp;lt;module_name&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;code>&amp;lt;module_name&amp;gt;&lt;/code> 并不重要，随便起个名字就行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>安装后需要启用主题，方法是将主题名称写入到根目录下的默认配置文件 &lt;code>config.yml&lt;/code> 中：&lt;/p>
&lt;pre>&lt;code>echo 'theme = &amp;quot;eureka&amp;quot;' &amp;gt;&amp;gt; config.toml
&lt;/code>&lt;/pre>&lt;p>如果是通过 &lt;code>Hugo Modules&lt;/code> 安装，需要把主题名称替换成模块名称：&lt;/p>
&lt;pre>&lt;code>echo 'theme = &amp;quot;github.com/wangchucheng/hugo-eureka&amp;quot;' &amp;gt;&amp;gt; config.toml
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>添加一篇文章。可以直接在 &lt;code>content/posts&lt;/code> 目录下创建 markdown 文件，但需要手动写入一些元信息，因此推荐使用 Hugo 自带的命令：&lt;code>hugo new posts/my-first-post.md&lt;/code>，添加的文件会以如下元信息开头：&lt;/p>
&lt;pre>&lt;code>---
title: &amp;quot;My First Post&amp;quot;
date: 2019-03-26T08:47:11+01:00
draft: true
---
&lt;/code>&lt;/pre>&lt;p>在下方接着写入文章内容即可。注意此时该文件为草稿状态，写作完成后需要改成 &lt;code>draft: false&lt;/code> 才能部署。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动 Hugo 预览服务器。Hugo 可以启动一个 Web 服务器，同时构建站点内容到内存中并在检测到文件更改后重新渲染，方便我们在开发环境实时预览对站点所做的更改。&lt;/p>
&lt;pre>&lt;code>hugo server -D
&lt;/code>&lt;/pre>&lt;p>注意添加 &lt;code>-D&lt;/code> 选项以输出草稿状态的文章。执行成功后可以通过 &lt;code>http://localhost:1313/&lt;/code> 访问站点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自定义主题配置。站点的配置项默认保存在根目录的 &lt;code>config.toml&lt;/code> 文件中，配置项较多时通常会用主题提供的预设配置文件来替换该文件，还可以通过&lt;code>config&lt;/code> 目录加多个文件的方式来组织配置。默认配置文件如下：&lt;/p>
&lt;pre>&lt;code>baseURL = &amp;quot;http://example.org/&amp;quot; # 发布地址，由主机名以及路径组成
languageCode = &amp;quot;en-us&amp;quot; # 语言代码，中文可以设置为&amp;quot;zh&amp;quot;
title = &amp;quot;My New Hugo Site&amp;quot; # 站点标题
&lt;/code>&lt;/pre>&lt;p>这一步应该是整个过程中最麻烦也是最容易出问题的一步，视乎你选择的主题与想要的功能不同，需要自定义的配置项也不同，数量从几个到上百个不等。有些主题会有详细的文档解释配置过程，有些则一笔带过只能自己去摸索，配置较多时相互间可能还有依赖关系，最好更改一个配置就刷新一次页面确认下结果。&lt;/p>
&lt;p>建议起步时一切从简，花大把时间搞各种花里胡哨的样式和功能，还不如多写几篇文章。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>构建静态页面。站点配置成我们理想的效果之后就可以构建静态页面了：&lt;/p>
&lt;pre>&lt;code>hugo -D
&lt;/code>&lt;/pre>&lt;p>添加 &lt;code>-D&lt;/code> 选项可以在结果中包括草稿内容，默认情况下静态页面会输出到根目录下的 &lt;code>public&lt;/code> 文件夹中。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="通过-github-pages-发布">通过 GitHub Pages 发布&lt;/h2>
&lt;p>这一步 Hugo 的官方文档同样在 &lt;a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">Host on GitHub&lt;/a> 中进行了详细的介绍，并且还很贴心的提供了自动化操作的 Shell 脚本。&lt;/p>
&lt;p>有两种方式：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>通过个人主页发布：必须创建一个 &lt;code>&amp;lt;USERNAME&amp;gt;.github.io&lt;/code> 仓库来托管生成的静态内容，发布后的域名为 &lt;code>https://&amp;lt;USERNAME&amp;gt;.github.io&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过项目主页发布：可以随意创建 &lt;code>&amp;lt;PROJECT_NAME&amp;gt;&lt;/code> 仓库，发布后的域名为 &lt;code>https://&amp;lt;USERNAME&amp;gt;.github.io/&amp;lt;PROJECT_NAME&amp;gt;&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>视选择的发布方式不同，我们需要将 &lt;code>config.yml&lt;/code> 中的 &lt;code>baseUrl&lt;/code> 设置为不同的值。&lt;/p>
&lt;h3 id="通过个人主页发布">通过个人主页发布&lt;/h3>
&lt;p>建议非特殊情况下使用第 1 种方式，原因是许多主题都不能很好的支持第 2 种方式，更具体的说是将 &lt;code>config.toml&lt;/code> 的 &lt;code>baseURL&lt;/code>设置为含子路径的地址时，不能正确的处理所有资源的构建位置。我尝试了 3 个主题，均遭遇了不同的问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>eureka&lt;/code>: 构建失败，提示 :&lt;/p>
&lt;pre>&lt;code>Error: Error building site: POSTCSS: failed to transform &amp;quot;css/eureka.css&amp;quot; (text/css): resource &amp;quot;css/waynerv.github.io/css/eureka.css_fc3f76d7bee2760c3a903059afc3d9b2&amp;quot; not found in file cache
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;code>LoveIt&lt;/code>: 构建成功，但除主页以外的文章、分类和标签的页面均提示 404。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>MemE&lt;/code>: 构建成功，但文章中插入的图片加载 404（放在同一文件夹的&lt;code>favicon&lt;/code> 却能正常展示）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这个问题我在 &lt;code>eureka&lt;/code> 项目提交了 issue，开发者回复可能是 Hugo 本身的机制所导致，并已经在 Hugo 论坛中提出了此&lt;a href="https://discourse.gohugo.io/t/cached-resources-not-found-in-file-cache-when-baseurl-contains-subdirectory/30182/8">问题&lt;/a>，有兴趣的可以关注后续进展。&lt;/p>
&lt;h3 id="发布步骤">发布步骤&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>在 GitHub 创建个人主页仓库，仓库名称必须设置为 &lt;code>&amp;lt;USERNAME&amp;gt;.github.io&lt;/code>，这个仓库仅存放生成的静态内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 GitHub 创建一个项目仓库 &lt;code>hugo-blog&lt;/code> 并添加为我们本地项目文件夹的远程仓库。这个仓库用来维护站点配置和原始的文章内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>假设我们在已经通过上文的步骤在 &lt;code>public&lt;/code> 文件夹中生成了想发布的静态内容，运行：&lt;/p>
&lt;pre>&lt;code>git submodule add -b main https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public
&lt;/code>&lt;/pre>&lt;p>在 &lt;code>public&lt;/code> 目录中创建一个 git 子模块，之后这个目录将以 &lt;code>https://github.com/&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io&lt;/code> 作为远程仓库。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确保配置文件中的 &lt;code>baseUrl&lt;/code> 已经设置为了 &lt;code>&amp;lt;USERNAME&amp;gt;.github.io&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hugo 为我们接下来的部署操作提供了一个自动化的 Shell 脚本：&lt;/p>
&lt;pre>&lt;code>#!/bin/sh
# 任一步骤执行失败都会终止整个部署过程
set -e
printf &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m\n&amp;quot;
# 构建静态内容
hugo # if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;`
# 切换到 Public 文件夹
cd public
# 添加更改到 git
git add .
# 提交更改
msg=&amp;quot;rebuilding site $(date)&amp;quot;
if [ -n &amp;quot;$*&amp;quot; ]; then
msg=&amp;quot;$*&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;
# 推送到远程仓库
git push origin main
&lt;/code>&lt;/pre>&lt;p>将如上内容保存到 &lt;code>deploy.sh&lt;/code> 文件中，并执行 &lt;code>chmod +x deploy.sh&lt;/code> 为其添加可执行权限。接着执行部署脚本：&lt;/p>
&lt;pre>&lt;code>./deploy.sh
&lt;/code>&lt;/pre>&lt;p>大功告成！稍等几分钟就可以在 &lt;code>https://&amp;lt;USERNAME&amp;gt;.github.io&lt;/code> 看到我们的个人博客了。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="通过-github-actions-自动部署">通过 GitHub Actions 自动部署&lt;/h3>
&lt;p>目前我们的「创作-发布」流程如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在项目仓库编辑原始内容并进行版本管理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行自动脚本生成静态站点并推送到个人主页仓库完成发布。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>这套流程已经很流畅，但还有一些改进空间：我们可以使用 &lt;a href="https://github.com/features/actions">GitHub Actions&lt;/a>，在每次向远程的项目仓库推送原始内容更改时自动执行第 2 步进行发布。&lt;/p>
&lt;p>GitHub 上有许多这类自动化部署任务的开源 Actions 项目，我们选择了其中一个简单易用的 &lt;a href="https://github.com/peaceiris/actions-hugo#getting-started">GitHub Actions for Hugo&lt;/a>。具体的操作步骤截图和详细配置项可以查看该项目的 &lt;a href="https://github.com/peaceiris/actions-hugo#github-actions-for-hugo">README&lt;/a>。下面简单介绍下配置过程：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>在项目文件夹中添加目录和文件：&lt;code>.github/workflows/gh-pages.yml&lt;/code>，&lt;code>gh-pages.yml&lt;/code> 文件内容如下：&lt;/p>
&lt;pre>&lt;code>name: github pages
on:
push:
branches:
- main # 每次推送到 main 分支都会触发部署任务
jobs:
deploy:
runs-on: ubuntu-18.04
steps:
- uses: actions/checkout@v2
with:
submodules: true # Fetch Hugo themes (true OR recursive)
fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod
- name: Setup Hugo
uses: peaceiris/actions-hugo@v2
with:
hugo-version: '0.79.1'
extended: true
- name: Build
run: hugo --minify
- name: Deploy
uses: peaceiris/actions-gh-pages@v3
with:
deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
external_repository: &amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io # 替换成上文所创建的个人主页仓库
publish_branch: main
publish_dir: ./public
&lt;/code>&lt;/pre>&lt;p>这个文件所定义的 &lt;code>workflow&lt;/code> 基于项目仓库运行，但我们需要将运行过程生成的静态文件推送到个人主页仓库 &lt;code>&amp;lt;USERNAME&amp;gt;.github.io&lt;/code> 完成发布，因此在 &lt;code>Deploy&lt;/code> 任务中按照文档的 &lt;a href="https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-deploy-to-external-repository-external_repository">Deploy to external repository &lt;code>external_repository&lt;/code>&lt;/a> 一节做了专门的配置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在本地生成 SSH 部署密钥：&lt;/p>
&lt;pre>&lt;code>ssh-keygen -t rsa -b 4096 -C &amp;quot;$(git config user.email)&amp;quot; -f gh-pages -N &amp;quot;&amp;quot;
# 将在当前目录生成如下密钥文件:
# gh-pages.pub (公钥)
# gh-pages (私钥)
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>在 GitHub 分别进入项目仓库和个人主页仓库的 &lt;code>Settings&lt;/code> 页面：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>将公钥 &lt;code>gh-pages.pub&lt;/code> 作为 &lt;code>Secret&lt;/code> 添加到项目仓库，并设置 &lt;code>Name&lt;/code> 为 &lt;code>ACTIONS_DEPLOY_KEY&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>将私钥 &lt;code>gh-pages&lt;/code> 作为 &lt;code>Deploy Key&lt;/code> 添加到个人主页仓库，并设置为 &lt;code>Allow write access&lt;/code>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>接下来我们测试一下效果。&lt;/p>
&lt;p>在本地做一些更改，预览效果后提交并推送，然后在项目仓库的 GitHub Actions 页面检查相应的 &lt;code>workflow&lt;/code> 是否运行成功。不出意外的话，很快个人主页仓库将新增一个由该 &lt;code>workflow&lt;/code> 创建的提交，访问个人博客页面也会发现页面已经更新。&lt;/p>
&lt;h2 id="个人体验">个人体验&lt;/h2>
&lt;p>由于先后选择的 3 个主题均遭遇了上述发布地址不能包含子路径的问题，我在基本按照官方文档操作的前提下，依然花了超过 10 个小时才把&lt;a href="https://waynerv.github.io/">博客&lt;/a>上线，浪费了很多时间在配置主题以及寻找问题的解决方案上。本以为选择了一个简单快捷的省心方案，结果还是免不了过程的一顿踩坑和折腾。&lt;/p>
&lt;p>虽然搭建博客的流程不算省心，但我所遇到的这些问题也算是个例。一切准备就绪后，我们可以像写代码一样写博客，对文章修改提交即自动发布，也不需要考虑博客的样式、后台功能及主机维护等问题，可以省下来很多的时间和精力，也能对提升写作效率有所帮助，综合来看体验还是不错的。&lt;/p></description><category domain="https://waynerv.github.io/categories/%E4%B8%AA%E4%BA%BA/">个人</category><category domain="https://waynerv.github.io/tags/%E5%8D%9A%E5%AE%A2/">博客</category></item><item><title>git rebase 浅析</title><link>https://waynerv.github.io/posts/git-rebase-intro/</link><guid isPermaLink="true">https://waynerv.github.io/posts/git-rebase-intro/</guid><pubDate>Wed, 23 Dec 2020 23:45:24 +0800</pubDate><author>ampedee@gmail.com (Waynerv)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description>&lt;p>之所以写这篇文章，是因为之前对 &lt;code>git rebase -i&lt;/code> 的用法一直是一知半解，一次在需要合并多个提交时刚好用到，一顿操作差点把提交都搞丢了，幸好后面顺利找回，因此记录一下学习 &lt;code>rebase&lt;/code> 命令的过程。&lt;/p>
&lt;h2 id="理解-rebase-命令">理解 Rebase 命令&lt;/h2>
&lt;p>&lt;code>git rebase&lt;/code> 命令的文档描述是 &lt;code>Reapply commits on top of another base tip&lt;/code>，从字面上理解是「在另一个基端之上重新应用提交」，这个定义听起来有点抽象，换个角度可以理解为「将分支的基础从一个提交改成另一个提交，使其看起来就像是从另一个提交中创建了分支一样」，如下图：&lt;/p>
&lt;p>&lt;img src="https://waynerv.github.io/images/git-rebase-visual.png" alt="git-rebase.png">&lt;/p>
&lt;p>假设我们从 &lt;code>Master&lt;/code> 的提交 A 创建了 &lt;code>Feature&lt;/code> 分支进行新的功能开发，这时 A 就是 &lt;code>Feature&lt;/code> 的基端。接着 &lt;code>Matser&lt;/code> 新增了两个提交 B 和 C， &lt;code>Feature&lt;/code> 新增了两个提交 D 和 E。现在我们出于某种原因，比如新功能的开发依赖 B、C 提交，需要将 &lt;code>Master&lt;/code> 的两个新提交整合到 &lt;code>Feature&lt;/code> 分支，为了保持提交历史的整洁，我们可以切换到 &lt;code>Feature&lt;/code> 分支执行 &lt;code>rebase&lt;/code> 操作：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git rebase master
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>rebase&lt;/code> 的执行过程是首先找到这两个分支（即当前分支 &lt;code>Feature&lt;/code>、 &lt;code>rebase&lt;/code> 操作的目标基底分支 &lt;code>Master&lt;/code>） 的最近共同祖先提交 A，然后对比当前分支相对于该祖先提交的历次提交（D 和 E），提取相应的修改并存为临时文件，然后将当前分支指向目标基底 &lt;code>Master&lt;/code> 所指向的提交 C, 最后以此作为新的基端将之前另存为临时文件的修改依序应用。&lt;/p>
&lt;p>我们也可以按上文理解成将 &lt;code>Feature&lt;/code> 分支的基础从提交 A 改成了提交 C，看起来就像是从提交 C 创建了该分支，并提交了 D 和 E。但实际上这只是「看起来」，在内部 Git 复制了提交 D 和 E 的内容，创建新的提交 D' 和 E' 并将其应用到特定基础上（A→B→C）。尽管新的 &lt;code>Feature&lt;/code> 分支和之前看起来是一样的，但它是由全新的提交组成的。&lt;/p>
&lt;p>&lt;code>rebase&lt;/code> 操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。&lt;/p>
&lt;h2 id="主要用途">主要用途&lt;/h2>
&lt;p>&lt;code>rebase&lt;/code> 通常用于重写提交历史。下面的使用场景在大多数 Git 工作流中是十分常见的：&lt;/p>
&lt;ul>
&lt;li>我们从 &lt;code>master&lt;/code> 分支拉取了一条 &lt;code>feature&lt;/code> 分支在本地进行功能开发&lt;/li>
&lt;li>远程的 &lt;code>master&lt;/code> 分支在之后又合并了一些新的提交&lt;/li>
&lt;li>我们想在 &lt;code>feature&lt;/code> 分支集成 &lt;code>master&lt;/code> 的最新更改&lt;/li>
&lt;/ul>
&lt;h3 id="和-merge-的区别">和 &lt;code>merge&lt;/code> 的区别&lt;/h3>
&lt;p>以上场景同样可以使用 &lt;code>merge&lt;/code> 来达成目的，但使用 &lt;code>rebase&lt;/code> 可以使我们保持一个线性且更加整洁的提交历史。假设我们有如下分支：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash"> D---E feature
/
A---B---C master
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>现在我们将分别使用 &lt;code>merge&lt;/code> 和 &lt;code>rebase&lt;/code>，把 &lt;code>master&lt;/code> 分支的 B、C 提交集成到 &lt;code>feature&lt;/code> 分支，并在 &lt;code>feature&lt;/code> 分支新增一个提交 F，然后再将 &lt;code>feature&lt;/code> 分支合入 &lt;code>master&lt;/code> ，最后对比两种方法所形成的提交历史的区别。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>使用 &lt;code>merge&lt;/code>&lt;/p>
&lt;ol>
&lt;li>切换到 &lt;code>feature&lt;/code> 分支： &lt;code>git checkout feature&lt;/code>&lt;/li>
&lt;li>合并 &lt;code>master&lt;/code> 分支的更新： &lt;code>git merge master&lt;/code>&lt;/li>
&lt;li>新增一个提交 F： &lt;code>git add . &amp;amp;&amp;amp; git commit -m &amp;quot;commit F&amp;quot;&lt;/code>&lt;/li>
&lt;li>切回 &lt;code>master&lt;/code> 分支并执行快进合并： &lt;code>git chekcout master &amp;amp;&amp;amp; git merge feature&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>我们将得到如下提交历史：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">* 6fa5484 &lt;span class="o">(&lt;/span>HEAD -&amp;gt; master, feature&lt;span class="o">)&lt;/span> commit F
* 875906b Merge branch &lt;span class="s1">&amp;#39;master&amp;#39;&lt;/span> into feature
&lt;span class="p">|&lt;/span>&lt;span class="se">\ &lt;/span>
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> 5b05585 commit E
&lt;span class="p">|&lt;/span> &lt;span class="p">|&lt;/span> f5b0fc0 commit D
* * d017dff commit C
* * 9df916f commit B
&lt;span class="p">|&lt;/span>/
* cb932a6 commit A
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>rebase&lt;/code>&lt;/p>
&lt;p>步骤与使用 &lt;code>merge&lt;/code> 基本相同，唯一的区别是第 2 步的命令替换成： &lt;code>git rebase master&lt;/code>&lt;/p>
&lt;p>我们将得到如下提交历史：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">* 74199ce &lt;span class="o">(&lt;/span>HEAD -&amp;gt; master, feature&lt;span class="o">)&lt;/span> commit F
* e7c7111 commit E
* d9623b0 commit D
* 73deeed commit C
* c50221f commit B
* ef13725 commit A
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>可以看到，使用 &lt;code>rebase&lt;/code> 方法形成的提交历史是完全线性的，同时相比 &lt;code>merge&lt;/code> 方法少了一次 &lt;code>merge&lt;/code> 提交，看上去更加整洁。&lt;/p>
&lt;h3 id="为什么要保持提交历史的整洁">为什么要保持提交历史的整洁&lt;/h3>
&lt;p>一个看上更整洁的提交历史有什么好处？&lt;/p>
&lt;ol>
&lt;li>满足某些开发者的洁癖。&lt;/li>
&lt;li>当你因为某些 bug 需要回溯提交历史时，更容易定位到 bug 是从哪一个提交引入。尤其是当你需要通过 &lt;code>git bisect&lt;/code> 从几十上百个提交中排查 bug，或者有一些体量较大的功能分支需要频繁的从远程的主分支拉取更新时。&lt;/li>
&lt;/ol>
&lt;p>使用 &lt;code>rebase&lt;/code> 来将远程的变更整合到本地仓库是一种更好的选择。用 &lt;code>merge&lt;/code> 拉取远程变更的结果是，每次你想获取项目的最新进展时，都会有一个多余的 &lt;code>merge&lt;/code> 提交。而使用 &lt;code>rebase&lt;/code> 的结果更符合我们的本意：我想在其他人的已完成工作的基础上进行我的更改。&lt;/p>
&lt;h3 id="其他重写提交历史的方法">其他重写提交历史的方法&lt;/h3>
&lt;p>当我们仅仅只想修改最近的一次提交时，使用 &lt;code>git commit --amend&lt;/code> 会更加方便。&lt;/p>
&lt;p>它适用于以下场景：&lt;/p>
&lt;ul>
&lt;li>我们刚刚完成了一次提交，但还没有推送到公共的分支。&lt;/li>
&lt;li>突然发现上个提交还留了些小尾巴没有完成，比如一行忘记删除的注释或者一个很小的笔误，我们可以很快速的完成修改，但又不想再新增一个单独的提交。&lt;/li>
&lt;li>或者我们只是觉得上一次提交的提交信息写的不够好，想做一些修改。&lt;/li>
&lt;/ul>
&lt;p>这时候我们可以添加新增的修改（或跳过），使用 &lt;code>git commit --amend&lt;/code> 命令执行提交，执行后会进入一个新的编辑器窗口，可以对上一次提交的提交信息进行修改，保存后就会将所做的这些更改应用到上一次提交。&lt;/p>
&lt;p>如果我们已经将上一次提交推送到了远程的分支，现在再执行推送将会提示出错并被拒绝，在确保该分支不是一个公共分支的前提下，我们可以使用 &lt;code>git push --force&lt;/code> 强制推送。&lt;/p>
&lt;p>注意与 &lt;code>rebase&lt;/code> 一样，Git 在内部并不会真正地修改并替换上一个提交，而是创建了一个全新的提交并重新指向这个新的提交。&lt;/p>
&lt;h2 id="使用-rebase-的交互模式重写提交历史">使用 &lt;code>rebase&lt;/code> 的交互模式重写提交历史&lt;/h2>
&lt;p>&lt;code>git rebase&lt;/code> 命令有标准和交互两种模式，之前的示例我们用的都是默认的标准模式，在命令后添加 &lt;code>-i&lt;/code> 或 &lt;code>--interactive&lt;/code> 选项即可使用交互模式。&lt;/p>
&lt;h3 id="两种模式的区别">两种模式的区别&lt;/h3>
&lt;p>我们前面提到， &lt;code>rebase&lt;/code> 是「在另一个基端之上重新应用提交」，而在重新应用的过程中，这些提交会被重新创建，自然也可以进行修改。在 &lt;code>rebase&lt;/code> 的标准模式下，当前工作分支的提交会被直接应用到传入分支的顶端；而在交互模式下，则允许我们在重新应用之前通过编辑器以及特定的命令规则对这些提交进行合并、重新排序及删除等重写操作。&lt;/p>
&lt;p>两者最常见的使用场景也因此有所不同：&lt;/p>
&lt;ol>
&lt;li>标准模式常用于在当前分支中集成来自其他分支的最新修改。&lt;/li>
&lt;li>交互模式常用于对当前分支的提交历史进行编辑，如将多个小提交合并成大的提交。&lt;/li>
&lt;/ol>
&lt;h3 id="不仅仅是分支">不仅仅是分支&lt;/h3>
&lt;p>虽然我们之前的示例都是在不同的两个分支之间执行 rebase 操作，但事实上 rebase 命令传入的参数并不仅限于分支。&lt;/p>
&lt;p>任何的提交引用，都可以被视作有效的 &lt;code>rebase&lt;/code> 基底对象，包括一个提交 ID、分支名称、标签名称或 &lt;code>HEAD~1&lt;/code> 这样的相对引用。&lt;/p>
&lt;p>自然地，假如我们对当前分支的某次历史提交执行 &lt;code>rebase&lt;/code>，其结果就是会将这次提交之后的所有提交重新应用在当前分支，在交互模式下，即允许我们对这些提交进行更改。&lt;/p>
&lt;h3 id="重写提交历史">重写提交历史&lt;/h3>
&lt;p>终于进入到本文的主题，前面提到，假如我们在交互模式对当前分支的某次提交执行 &lt;code>rebase&lt;/code>，即（间接）实现了对这次提交之后的所有提交进行重写。接下来我们将通过下面的示例进行详细介绍。&lt;/p>
&lt;p>假设我们在 &lt;code>feature&lt;/code> 分支有如下提交：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">74199cebdd34d107bb67b6da5533a2e405f4c330 &lt;span class="o">(&lt;/span>HEAD -&amp;gt; feature&lt;span class="o">)&lt;/span> commit F
e7c7111d807c1d5209b97a9c75b09da5cd2810d4 commit E
d9623b0ef9d722b4a83d58a334e1ce85545ea524 commit D
73deeedaa944ef459b17d42601677c2fcc4c4703 commit C
c50221f93a39f3474ac59228d69732402556c93b commit B
ef1372522cdad136ce7e6dc3e02aab4d6ad73f79 commit A
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来我们将要执行的操作是：&lt;/p>
&lt;ul>
&lt;li>将 B、C 合并为一个新的提交 ，并仅保留原提交 C 的提交信息&lt;/li>
&lt;li>删除提交 D&lt;/li>
&lt;li>将提交 E 移动到提交 F 之后并重新命名（即修改提交信息）为提交 H&lt;/li>
&lt;li>在提交 F 中加入一个新的文件更改，并重新命名为提交 G&lt;/li>
&lt;/ul>
&lt;p>由于我们需要修改的提交是 B→C→D→E，因此我们需要将提交 A 作为新的「基端」，提交 A 之后的所有提交会被重新应用：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git rebase -i ef1372522cdad136ce7e6dc3e02aab4d6ad73f79 &lt;span class="c1"># 参数是提交 A 的 ID&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来会进入到如下的编辑器界面：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pick c50221f commit B
pick 73deeed commit C
pick d9623b0 commit D
pick e7c7111 commit E
pick 74199ce commit F
&lt;span class="c1"># 变基 ef13725..74199ce 到 ef13725（5 个提交）&lt;/span>
&lt;span class="c1">#&lt;/span>
&lt;span class="c1"># 命令:&lt;/span>
&lt;span class="c1"># p, pick &amp;lt;提交&amp;gt; = 使用提交&lt;/span>
&lt;span class="c1"># r, reword &amp;lt;提交&amp;gt; = 使用提交，但修改提交说明&lt;/span>
&lt;span class="c1"># e, edit &amp;lt;提交&amp;gt; = 使用提交，进入 shell 以便进行提交修补&lt;/span>
&lt;span class="c1"># s, squash &amp;lt;提交&amp;gt; = 使用提交，但融合到前一个提交&lt;/span>
&lt;span class="c1"># f, fixup &amp;lt;提交&amp;gt; = 类似于 &amp;#34;squash&amp;#34;，但丢弃提交说明日志&lt;/span>
&lt;span class="c1"># x, exec &amp;lt;命令&amp;gt; = 使用 shell 运行命令（此行剩余部分）&lt;/span>
&lt;span class="c1"># b, break = 在此处停止（使用 &amp;#39;git rebase --continue&amp;#39; 继续变基）&lt;/span>
&lt;span class="c1"># d, drop &amp;lt;提交&amp;gt; = 删除提交&lt;/span>
......
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>（注意上面提交 ID 之后的提交信息只起到描述作用，在这里修改它们不会有任何效果。）&lt;/p>
&lt;p>具体的操作命令在编辑器的注释中已解释的相当详细，所以我们直接进行如下操作：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>对提交 B、C 作如下修改：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pick c50221f commit B
f 73deeed commit C
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于提交 B 是这些提交中的第一个，因此我们无法对其执行 &lt;code>squash&lt;/code> 或者 &lt;code>fixup&lt;/code> 命令（没有前一个提交了），我们也不需要对提交 B 执行 &lt;code>reword&lt;/code> 命令以修改其提交信息，因为之后在将提交 C 融合到提交 B 中时，会允许我们对融合之后的提交信息进行修改。&lt;/p>
&lt;p>注意该界面提交的展示顺序是从上到下由旧到新，因此我们将提交 C 的命令改为 &lt;code>s（或 squash）&lt;/code> 或者 &lt;code>f（或 fixup）&lt;/code> 会将其融合到（上方的）前一个提交 B，两个命令的区别为是否保留 C 的提交信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除提交 D：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">d d9623b0 commit D
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>移动提交 E 到提交 F 之后并修改其提交信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pick 74199ce commit F
r e7c7111 commit E
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>在提交 F 中加入一个新的文件更改：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">e 74199ce commit F
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>保存退出。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>接下来会按照从上到下的顺序依次执行我们对每一个提交所修改或保留的命令：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>对提交 B 的 &lt;code>pick&lt;/code> 命令会自动执行，因此不需要交互。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>接着执行对提交 C 的 &lt;code>squash&lt;/code> 命令，会进入一个新的编辑器界面允许我们修改合并了B、C 之后的提交信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 这是一个 2 个提交的组合。&lt;/span>
&lt;span class="c1"># 这是第一个提交说明：&lt;/span>
commit B
&lt;span class="c1"># 这是提交说明 #2：&lt;/span>
commit C
......
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们将 &lt;code>commit B&lt;/code> 这一行删除后保存退出，融合之后的提交将使用 &lt;code>commit C&lt;/code> 作为提交信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对提交 D 的 &lt;code>drop&lt;/code> 操作也会自动执行，没有交互步骤。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行 &lt;code>rebase&lt;/code> 的过程中可能会发生冲突，这时候 &lt;code>rebase&lt;/code> 会暂时中止，需要我们编辑冲突的文件去手动合并冲突。解决冲突后通过 &lt;code>git add/rm &amp;lt;conflicted_files&amp;gt;&lt;/code> 将其标记为已解决，然后执行 &lt;code>git rebase --continue&lt;/code> 可以继续之后的 &lt;code>rebase&lt;/code> 步骤；或者也可以执行 &lt;code>git rebase --abort&lt;/code> 放弃 &lt;code>rebase&lt;/code> 操作并恢复到操作之前的状态。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于我们上移了提交 F 的位置，因此接下来将执行对 F 的 &lt;code>edit&lt;/code> 操作。这时将进入一个新的 Shell 会话：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">停止在 74199ce... commit F
您现在可以修补这个提交，使用
git commit --amend
当您对变更感到满意，执行
git rebase --continue
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们添加一个新的代码文件并执行 &lt;code>git commit --amend&lt;/code> 将其合并到当前的上一个提交（即 F），然后在编辑器界面中将其提交信息修改为 &lt;code>commit G&lt;/code>，最后执行 &lt;code>git rebase --continue&lt;/code> 继续 &lt;code>rebase&lt;/code> 操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最后执行对提交 E 的 &lt;code>reword&lt;/code> 操作，在编辑器界面中将其提交信息修改为 &lt;code>commit H&lt;/code> 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>大功告成！最后让我们确认一下 &lt;code>rebase&lt;/code> 之后的提交历史：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">64710dc88ef4fbe8fe7aac206ec2e3ef12e7bca9 &lt;span class="o">(&lt;/span>HEAD -&amp;gt; feature&lt;span class="o">)&lt;/span> commit H
8ab4506a672dac5c1a55db34779a185f045d7dd3 commit G
1e186f890710291aab5b508a4999134044f6f846 commit C
ef1372522cdad136ce7e6dc3e02aab4d6ad73f79 commit A
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完全符合预期，同时也可以看到提交 A之后的所有提交 ID 都已经发生了改变，这也印证了我们之前所说的 Git 重新创建了这些提交。&lt;/p>
&lt;h2 id="rebase-的进阶用法">Rebase 的进阶用法&lt;/h2>
&lt;h3 id="合并之前执行-rebase">合并之前执行 &lt;code>rebase&lt;/code>&lt;/h3>
&lt;p>另一种使用 &lt;code>rebase&lt;/code> 的常见场景是在推送到远程进行合并之前执行 &lt;code>rebase&lt;/code>，一般这样做的目的是为了确保提交历史的整洁。&lt;/p>
&lt;p>我们首先在自己的功能分支里进行开发，当开发完成时需要先将当前功能分支 &lt;code>rebase&lt;/code> 到最新的主分支上，提前解决可能出现的冲突，然后再向远程提交修改。 这样的话，远程仓库的主分支维护者就不再需要进行整合且创建一条额外的 &lt;code>merge&lt;/code> 提交，只需要执行快进合并即可。即使是在多个分支并行开发的情况，最终也能得到一条完全线性的提交历史。&lt;/p>
&lt;h3 id="rebase-到其他分支">&lt;code>rebase&lt;/code> 到其他分支&lt;/h3>
&lt;p>我们可以通过 &lt;code>rebase&lt;/code> 对两个分支进行对比，取出相应的修改，然后应用到另一个分支上。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash"> F---G patch
/
D---E feature
/
A---B---C master
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>假设我们基于 &lt;code>feature&lt;/code> 分支的提交 D 创建了分支 &lt;code>patch&lt;/code>，并且新增了提交 F、G，现在我们想将 &lt;code>patch&lt;/code> 所做的更改合并到 &lt;code>master&lt;/code> 并发布，但暂时还不想合并 &lt;code>feature&lt;/code> ，这种情况下可以使用 &lt;code>rebase&lt;/code> 的 &lt;code>--onto &amp;lt;branch&amp;gt;&lt;/code> 选项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git rebase —onto master feature patch
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>以上操作将取出 &lt;code>patch&lt;/code> 分支，对比它基于 &lt;code>feature&lt;/code> 所做的更改， 然后把这些更改在 &lt;code>master&lt;/code> 分支上重新应用，让 &lt;code>patch&lt;/code> 看起来就像直接基于 &lt;code>master&lt;/code> 进行更改一样。执行后的 &lt;code>patch&lt;/code> 如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">A---B---C---F&lt;span class="s1">&amp;#39;---G&amp;#39;&lt;/span> patch
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后我们可以切换到 &lt;code>master&lt;/code> 分支，并对 &lt;code>patch&lt;/code> 执行快进合并：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git checkout master
git merge patch
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="通过-rebase-执行-git-pull">通过 &lt;code>rebase&lt;/code> 执行 &lt;code>git pull&lt;/code>&lt;/h3>
&lt;p>Git 在最近的某个版本起，直接运行 &lt;code>git pull&lt;/code> 会有如下提示消息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">warning: 不建议在没有为偏离分支指定合并策略时执行 pull 操作。 您可以在执行下一次 pull 操作之前执行下面一条命令来抑制本消息：
git config pull.rebase &lt;span class="nb">false&lt;/span> &lt;span class="c1"># 合并（缺省策略）&lt;/span>
git config pull.rebase &lt;span class="nb">true&lt;/span> &lt;span class="c1"># 变基&lt;/span>
git config pull.ff only &lt;span class="c1"># 仅快进&lt;/span>
......
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>原来 &lt;code>git pull&lt;/code> 时也可以通过 &lt;code>rebase&lt;/code> 来进行合并，这是因为 &lt;code>git pull&lt;/code> 实际上等于 &lt;code>git fetch&lt;/code> + &lt;code>git merge&lt;/code> ，我们可以在第二步直接用 &lt;code>git rebase&lt;/code> 替换 &lt;code>git merge&lt;/code>来合并 &lt;code>fetch&lt;/code> 取得的变更，作用同样是避免额外的 &lt;code>merge&lt;/code> 提交以保持线性的提交历史。&lt;/p>
&lt;p>两者的区别在上文中已进行过对比，我们可以把对比示例中的 &lt;code>Matser&lt;/code> 分支当成远程分支，把 &lt;code>Feature&lt;/code> 分支当成本地分支，当我们在本地执行 &lt;code>git pull&lt;/code> 时，其实就是拉取 &lt;code>Master&lt;/code> 的更改然后合并到 &lt;code>Feature&lt;/code> 分支。如果两个分支都有不同的提交，默认的 &lt;code>git merge&lt;/code> 方式会生成一个单独的 merge 提交以整合这些提交；而使用 &lt;code>git rebase&lt;/code> 则相当于基于远程分支的最新提交重新创建本地分支，然后再重新应用本地所添加的提交。&lt;/p>
&lt;p>具体的使用方式有多种：&lt;/p>
&lt;ul>
&lt;li>每次执行 pull 命令时添加特定选项： &lt;code>git pull --rebase&lt;/code> 。&lt;/li>
&lt;li>为当前仓库设定配置项： &lt;code>git config pull.rebase true&lt;/code>，在 &lt;code>git config&lt;/code> 后添加 &lt;code>--global&lt;/code> 选项可以使该配置项对所有仓库生效。&lt;/li>
&lt;/ul>
&lt;h2 id="潜在弊端和反对意见">潜在弊端和反对意见&lt;/h2>
&lt;p>从以上场景来看 &lt;code>rebase&lt;/code> 功能非常强大，但我们也需要意识到它不是万能的，甚至对新手来说有些危险，稍有不慎就会发现 &lt;code>git log&lt;/code> 里的提交不见了，或者卡在 &lt;code>rebase&lt;/code> 的某个步骤不知道如何恢复。&lt;/p>
&lt;p>我们上面已经提到了 &lt;code>rebase&lt;/code> 有保持整洁的线性提交历史的优点，但也需要意识到它有以下潜在的弊端：&lt;/p>
&lt;ul>
&lt;li>如果涉及到已经推送过的提交，需要强制推送才能将本地 &lt;code>rebase&lt;/code> 后的提交推送到远程。因此绝对不要在一个公共分支（也就是说还有其他人基于这个分支进行开发）执行 &lt;code>rebase&lt;/code>，否则其他人之后执行 &lt;code>git pull&lt;/code> 会把他们本地的提交历史也覆盖掉，甚至和他们已完成的工作发生冲突，较严重的情况下可能会对你的人身安全带来风险。&lt;/li>
&lt;li>对新手不友好，新手很有可能在交互模式中误操作「丢失」某些提交（但其实是能够找回的）。&lt;/li>
&lt;li>假如你频繁的使用 &lt;code>rebase&lt;/code> 来集成主分支的更新，一个潜在的后果是你会遇到越来越多需要合并的冲突。尽管你可以在 &lt;code>rebase&lt;/code> 过程中处理这些冲突，但这并非长久之计，更推荐的做法是频繁的合入主分支然后创建新的功能分支，而不是使用一个长时间存在的功能分支。&lt;/li>
&lt;/ul>
&lt;p>另外有一些观点是我们应该尽量避免重写提交历史：&lt;/p>
&lt;blockquote>
&lt;p>有一种观点认为，仓库的提交历史即是 记录实际发生过什么。 它是针对历史的文档，本身就有价值，不能乱改。 从这个角度看来，改变提交历史是一种亵渎，你使用 谎言 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。&lt;/p>
&lt;/blockquote>
&lt;p>以及频繁的使用 &lt;code>rebase&lt;/code> 可能会使从历史提交中定位 bug 变得更加困难，详见 &lt;a href="https://medium.com/@fredrikmorken/why-you-should-stop-using-git-rebase-5552bee4fed1">https://medium.com/@fredrikmorken/why-you-should-stop-using-git-rebase-5552bee4fed1&lt;/a>。&lt;/p>
&lt;h2 id="找回丢失的提交">找回丢失的提交&lt;/h2>
&lt;p>在交互式模式下进行 &lt;code>rebase&lt;/code> 并对提交执行 &lt;code>squash&lt;/code> 或 &lt;code>drop&lt;/code> 等命令后，会从分支的 &lt;code>git log&lt;/code> 中直接删除提交。如果你不小心操作失误，会以为这些提交已经永久消失了而吓出一身冷汗。&lt;/p>
&lt;p>但这些提交并没有真正地被删除，如上所说，Git 并不会修改（或删除）原来的提交，而是重新创建了一批新的提交，并将当前分支顶端指向了新提交。因此我们可以使用 &lt;code>git reflog&lt;/code> 找到并且重新指向原来的提交来恢复它们，这会撤销整个 &lt;code>rebase&lt;/code>。感谢 Git ，即使你执行 &lt;code>rebase&lt;/code> 或者 &lt;code>commit --amend&lt;/code> 等重写提交历史的操作，它也不会真正地丢失任何提交。&lt;/p>
&lt;h3 id="git-reflog">&lt;code>git reflog&lt;/code>&lt;/h3>
&lt;p>&lt;code>reflogs&lt;/code> 是 Git 用来记录本地仓库分支顶端的更新的一种机制，它会记录所有分支顶端曾经指向过的提交，因此 &lt;code>reflogs&lt;/code> 允许我们找到并切换到一个当前没有被任何分支或标签引用的提交。&lt;/p>
&lt;p>每当分支顶端由于任何原因被更新（通过切换分支、拉取新的变更、重写历史或者添加新的提交），一条新的记录将被添加到 &lt;code>reflogs&lt;/code> 中。如此一来，我们在本地所创建过的每一次提交都一定会被记录在 &lt;code>reflogs&lt;/code> 中。即使在重写了提交历史之后， &lt;code>reflogs&lt;/code> 也会包含关于分支的旧状态的信息，并允许我们在需要时恢复到该状态。&lt;/p>
&lt;p>注意 &lt;code>reflogs&lt;/code> 并不会永久保存，它有 90 天的过期时间。&lt;/p>
&lt;h3 id="还原提交历史">还原提交历史&lt;/h3>
&lt;p>我们从上一个例子继续，假设我们想恢复 &lt;code>feature&lt;/code> 分支在 &lt;code>rebase&lt;/code> 之前的 A→B→C→D→E→F 提交历史，但这时候的 &lt;code>git log&lt;/code> 中已经没有后面 5 个提交，所以需要从 &lt;code>reflogs&lt;/code> 中寻找，运行 &lt;code>git reflog&lt;/code> 结果如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">64710dc &lt;span class="o">(&lt;/span>HEAD -&amp;gt; feature&lt;span class="o">)&lt;/span> HEAD@&lt;span class="o">{&lt;/span>0&lt;span class="o">}&lt;/span>: rebase &lt;span class="o">(&lt;/span>&lt;span class="k">continue&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">(&lt;/span>finish&lt;span class="o">)&lt;/span>: returning to refs/heads/feature
64710dc &lt;span class="o">(&lt;/span>HEAD -&amp;gt; feature&lt;span class="o">)&lt;/span> HEAD@&lt;span class="o">{&lt;/span>1&lt;span class="o">}&lt;/span>: rebase &lt;span class="o">(&lt;/span>&lt;span class="k">continue&lt;/span>&lt;span class="o">)&lt;/span>: commit H
8ab4506 HEAD@&lt;span class="o">{&lt;/span>2&lt;span class="o">}&lt;/span>: rebase &lt;span class="o">(&lt;/span>&lt;span class="k">continue&lt;/span>&lt;span class="o">)&lt;/span>: commit G
1e186f8 HEAD@&lt;span class="o">{&lt;/span>3&lt;span class="o">}&lt;/span>: rebase &lt;span class="o">(&lt;/span>squash&lt;span class="o">)&lt;/span>: commit C
c50221f HEAD@&lt;span class="o">{&lt;/span>4&lt;span class="o">}&lt;/span>: rebase &lt;span class="o">(&lt;/span>start&lt;span class="o">)&lt;/span>: checkout ef1372522cdad136ce7e6dc3e02aab4d6ad73f79
74199ce HEAD@&lt;span class="o">{&lt;/span>5&lt;span class="o">}&lt;/span>: checkout: moving from master to feature
......
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>reflogs&lt;/code> 完整的记录了我们切换分支并进行 &lt;code>rebase&lt;/code> 的全过程，继续向下检索，我们找到了从 &lt;code>git log&lt;/code> 中消失的提交 F:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">74199ce HEAD@&lt;span class="o">{&lt;/span>15&lt;span class="o">}&lt;/span>: commit: commit F
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下来我们通过 &lt;code>git reset&lt;/code> 将 &lt;code>feature&lt;/code> 分支的顶端重新指向原来的提交 F：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 我们想将工作区中的文件也一并还原，因此使用了--hard选项 &lt;/span>
$ git reset --hard 74199ce
HEAD 现在位于 74199ce commit F
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再运行 &lt;code>git log&lt;/code> 会发现一切又回到了从前：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">74199cebdd34d107bb67b6da5533a2e405f4c330 &lt;span class="o">(&lt;/span>HEAD -&amp;gt; feature&lt;span class="o">)&lt;/span> commit F
e7c7111d807c1d5209b97a9c75b09da5cd2810d4 commit E
d9623b0ef9d722b4a83d58a334e1ce85545ea524 commit D
73deeedaa944ef459b17d42601677c2fcc4c4703 commit C
c50221f93a39f3474ac59228d69732402556c93b commit B
ef1372522cdad136ce7e6dc3e02aab4d6ad73f79 commit A
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="参考链接">参考链接&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase">git rebase | Atlassian Git Tutorial&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.atlassian.com/git/tutorials/rewriting-history">git amend | Atlassian Git Tutorial&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.atlassian.com/git/tutorials/syncing/git-pull">Git Pull | Atlassian Git Tutorial&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">Git - 变基&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://git-scm.com/docs/git-rebase">Git - git-rebase Documentation&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://git-scm.com/docs/git-reflog">Git - git-reflog Documentation&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@fredrikmorken/why-you-should-stop-using-git-rebase-5552bee4fed1">Why you should stop using Git rebase&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@fabisiakradoslaw/understand-how-does-git-rebase-work-and-compare-with-git-merge-and-git-interactive-rebase-cce2c9775e43">Understand how does git rebase work and compare with git merge and git interactive rebase&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description><category domain="https://waynerv.github.io/categories/%E5%B7%A5%E5%85%B7/">工具</category><category domain="https://waynerv.github.io/tags/git/">Git</category></item></channel></rss>